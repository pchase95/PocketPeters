package game;

import packets.*;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;

public class Server extends Thread {
	private List<ClientHandler> clients = new ArrayList<>();
	private DatagramSocket socket;
	
	public Server() {
		
		try {
			this.socket = new DatagramSocket(4324);
		}catch(SocketException e) {
			e.printStackTrace();
		}
	}
	
	public void run() {
		while(true) {
			byte[] data = new byte[1024];
			DatagramPacket packet = new DatagramPacket(data, data.length);
			try {
				socket.receive(packet);
				Packet pack = Packet.getPacket(packet);
				pack.readServer(this);
			}catch(IOException e) {
				e.printStackTrace();
			}
		}
	}

	public void sendData(byte[] data, InetAddress ipAddress, int port) {
		DatagramPacket packet = new DatagramPacket(data, data.length, ipAddress, port);
		try {
			socket.send(packet);
		}catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public void sendDataAll(byte[] data) {
		for(ClientHandler ch : clients) {
			sendData(data, ch.clientAddress(), ch.clientPort());
		}
	}
	
	
	public void newClient(DatagramPacket packet) {
		sendDataAll(packet.getData());
		String client_name = new String(packet.getData()).trim().substring(2);
		ClientHandler ch = new ClientHandler(packet.getAddress(), packet.getPort(), clients, client_name);
		Packet pack = new Packet00Login(client_name, ch, clients);
		pack.writeServer(this);
		clients.add(ch);
	}
	
	public void removeClient(String client_name) {
		clients.remove(toString().equals(client_name));
	}
}


