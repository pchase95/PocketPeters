package nick;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

import game.Client;
import game.Game;
import packets.Packet04Spawn;

public class Map extends JPanel implements ActionListener
{
	int p_count = 1;
	private List<Wall> walls = new ArrayList<>();
	private JFrame f;
	private Player player;
	private Player player2;
	private Player player3;
	private Player player4;
	private Game game;
	private Client client;
	private boolean paint = false;
	private JPanel self = this;
	public Map(Game game, Client client)
	{
		this.game = game;
		this.client = client;
		f = new JFrame("Memes");
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setSize(1010, 830);
		Timer t = new Timer(16, this);
		t.start();
		f.add(this);
		f.setVisible(true);
		setFocusable(true);
	}
	
	public void addPlayer(Player player) {
		switch(p_count) {
		case(1):
			this.player2 = player;
			p_count++;
			return;
		case(2):
			this.player3 = player;
			p_count++;
			return;
		case(3):
			this.player4 = player;
			p_count++;
			return;
		}
	}
	
	public void spawnPlayers() {
		player.spawn();
		self.addMouseListener(player);
		self.addKeyListener(player);
		if(player2.getID() != -1) {
			player2.spawn();
		}
		if(player3.getID() != -1) {
			player3.spawn();
		}
		if(player4.getID() != -1) {
			player4.spawn();
		}
	}
	
	private void paintTiles(Graphics g)
	{
		for(int i = 0; i < BattleGrounds.map1.length; i++)
		{
			for(int j = 0; j < BattleGrounds.map1[i].length; j++)
			{
				if(BattleGrounds.map1[i][j] == 1)
				{
					Wall wall = new Wall(j, i);
					wall.paintWall(g);
					walls.add(wall);
				}
			}
		}			
	}
	
	public void paintComponent(Graphics g)
	{
		g.setColor(Color.LIGHT_GRAY);
		g.fillRect(0, 0, 1000, 800);
		paintTiles(g);
		if(paint) {
			if(player2.getID() != -1) {
				player2.paintPlayer(g);
			}
		}
	}


	@Override
	public void actionPerformed(ActionEvent e)
	{
		repaint();
	}
	
	public Game getGame() {
		return this.game;
	}
	
	public Client getClient() {
		return this.client;
	}
	
	public Player getPlayer() {
		return player;
	}
	
	public void setPlayer(Player player) {
		this.player = player;
		spawnPlayers();
		paint = true;
	}
	
	public void printPlayers() {
		for(Player p : players) {
			System.out.println(p.toString());
		}
	}
	
	public void stopById(int id) {
		for(Player play : players) {
			if(play.getID() == id) {
				play.setXVEL(0);
				play.setYVEL(0);
			}
		}
	}
	
	public void setCoordsById(int id, int x, int y) {
		for(Player play : players) {
			if(play.getID() == id) {
				play.setCoords(x, y);
			}
		}
		
	}
	
}
