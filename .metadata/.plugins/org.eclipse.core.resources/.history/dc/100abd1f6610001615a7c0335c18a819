package nick;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import packets.Packet04Spawn;

public class Player implements KeyListener, MouseListener
{
	private int x_pos, y_pos;
	private int x_vel = 0, y_vel = 0;
	private int speed = 5;
	private Shot shot[] = new Shot[6];
	private int count = 0;
	private boolean reloading = false;
	private int reloadDelay = 50;
	private Map map;
	private int player_ID;
	private String player_name;
	
//	public Player(int x_pos, int y_pos)
//	{
//		this.x_pos = x_pos;
//		this.y_pos = y_pos;
//		for(int i = 0; i < shot.length; i++)	{	shot[i] = new Shot();	}
//	}
	
	public Player(Map map, int id, String name) {
		this.map = map;
		this.player_ID = id;
		this.player_name = name;
	}
	
	public void paintPlayer(Graphics g)
	{
		updatePosition();
		g.setColor(Color.RED);
		g.fillOval(x_pos-15, y_pos-15, 30, 30);
		
//		for(int i = 0; i < shot.length; i++)
//		{
//			shot[i].paintShot(g);
//		}
		//puts a delay to avoid a glitch
		count++;
		if(count > reloadDelay && reloading)
		{
			reload();
			reloading = false;
		}
	}
	
	public void updatePosition()
	{
		if(!canMove(x_pos+x_vel,y_pos+y_vel))
		{
			x_pos+=x_vel;
			y_pos+=y_vel;
		}
		
	}
	public boolean canMove(int newX, int newY)
	{
		for(int i = 0; i < BattleGrounds.map1.length; i++)
		{
			for(int j = 0; j < BattleGrounds.map1[i].length; j++)
			{
				if(BattleGrounds.map1[i][j] == 1)
				{
					if(newX >= (j*50) && newX <= (j*50 + 50) && newY >= (i*50) && newY <= (i*50 + 50))
					{
						return true;
					}
				}
			}
		}
		return false;
	}
	
	public void setXVEL(int i) { this.x_vel = i; }
	public void setYVEL(int i) { this.y_vel = i; }
	
	@Override
	public void keyTyped(KeyEvent e) {}
	@Override
	public void keyPressed(KeyEvent e)
	{
		if(e.getKeyCode() == KeyEvent.VK_W){
			y_vel = -speed;
		}
		if(e.getKeyCode() == KeyEvent.VK_A)
			x_vel = -speed;
		if(e.getKeyCode() == KeyEvent.VK_S)
			y_vel = speed;
		if(e.getKeyCode() == KeyEvent.VK_D)
			x_vel = speed;
		if(e.getKeyCode() == KeyEvent.VK_R)
		{
			count = 0;
			reloading = true;//reload();
		}
	}
	@Override
	public void keyReleased(KeyEvent e)
	{
		if(e.getKeyCode() == KeyEvent.VK_W)
			y_vel = 0;
		if(e.getKeyCode() == KeyEvent.VK_A)
			x_vel = 0;
		if(e.getKeyCode() == KeyEvent.VK_S)
			y_vel = 0;
		if(e.getKeyCode() == KeyEvent.VK_D)
			x_vel = 0;
	}

	public void mouseClicked(MouseEvent arg0) {}
	public void mouseEntered(MouseEvent arg0) {}
	public void mouseExited(MouseEvent arg0) {}
	public void mousePressed(MouseEvent e) 
	{
		int x = 0;
		while(shot[x].getFired())
		{
			x++;
			if(x == shot.length)	{	break;	}
		}
		if(x < shot.length && count > reloadDelay)	
			shot[x].shoot(x_pos,y_pos,e.getX(),e.getY());
	}
	public void mouseReleased(MouseEvent arg0) {}
	private void reload()
	{
		for(int i = 0; i < shot.length; i++)	{	shot[i].loaded();	}
	}
	
	public void setCoords(int x, int y) {
		this.x_pos = x;
		this.y_pos = y;
	}
	
	public void spawn() {
		if(player_ID == 0) {
			System.out.println("MEME");
			x_pos = 200;
			y_pos = 200;
		} else if(player_ID == 1) {
			x_pos = 200;
			y_pos = 800;
		} else if(player_ID == 2) {
			x_pos = 800;
			y_pos = 200;
		} else if(player_ID == 3) {
			x_pos = 800;
			y_pos = 800;
		}
	}
	
	public String toString() {
		return "Player " + this.player_ID + ": " + this.player_name;
	}
}
